//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;

using MetroLog;
using PacketMessagingTS.Controls;
using PacketMessagingTS.Core.Helpers;
using PacketMessagingTS.ViewModels;

using SharedCode;

using Windows.Storage;
using Windows.Storage.Pickers;
using Windows.Storage.Provider;
using Windows.UI.Xaml.Controls;

// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 

namespace PacketMessagingTS.Models
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
	//[System.SerializableAttribute()]
	//[System.Diagnostics.DebuggerStepThroughAttribute()]
	//[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
	public partial class CommLog
	{
		private static ILogger log = LogManagerFactory.DefaultLogManager.GetLogger<CommLog>();
        private static LogHelper _logHelper = new LogHelper(log);


        private const string commLogFileName = "ICS309";

		private CommLogEntry[] logentryField;

		private List<CommLogEntry> commLogEntryListField;

        private string incidentNameField = "";

        private string activationNumberField = "";

        //private string incidentNameActivationNumberField = "";

		private DateTime operationalPeriodFromField;

		private DateTime operationalPeriodToField;

		private string radioNetNameField = "";

        private string dateTimePreparedField;

        private string operatorNameCallsignField;

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute("LogEntry")]
		public CommLogEntry[] CommLogEntries
		{
			get
			{
				return this.logentryField;
			}
			set
			{
				this.logentryField = value;
			}
		}

		[System.Xml.Serialization.XmlIgnore]
		public List<CommLogEntry> CommLogEntryList
		{
			get => commLogEntryListField == null ? commLogEntryListField = new List<CommLogEntry>() : commLogEntryListField;
			set
			{
				commLogEntryListField = value;
			}
		}

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string IncidentName
        {
            get
            {
                return this.incidentNameField;
            }
            set
            {
                this.incidentNameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ActivationNumber
        {
            get => activationNumberField;
            set => activationNumberField = value;
        }

        ///// <remarks/>
        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string IncidentNameActivationNumber
        //{
        //    get
        //    {
        //        return this.incidentNameActivationNumberField;
        //    }
        //    set
        //    {
        //        this.incidentNameActivationNumberField = value;
        //    }
        //}

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
		public DateTime OperationalPeriodFrom
		{
			get
			{
				return this.operationalPeriodFromField;
			}
			set
			{
				this.operationalPeriodFromField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public DateTime OperationalPeriodTo
		{
			get
			{
				return this.operationalPeriodToField;
			}
			set
			{
				this.operationalPeriodToField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string RadioNetName
		{
			get
			{
				return this.radioNetNameField;
			}
			set
			{
				this.radioNetNameField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string OperatorNameCallsign
		{
			get
			{
				return this.operatorNameCallsignField;
			}
			set
			{
				this.operatorNameCallsignField = value;
			}
		}

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DateTimePrepared
        {
            get
            {
                return this.dateTimePreparedField;
            }
            set
            {
                this.dateTimePreparedField = value;
            }
        }

        public CommLog()
        {
		}

		public static CommLog Open(StorageFile file)
		{
            if (file.FileType != ".xml")
                return null;

            CommLog commLog = new CommLog();
			try
			{
				using (FileStream reader = new FileStream(file.Path, FileMode.Open))
				{
					XmlSerializer serializer = new XmlSerializer(typeof(CommLog));
                    commLog = (CommLog)serializer.Deserialize(reader);
                }
			}
			catch (FileNotFoundException e)
			{
                _logHelper.Log(LogLevel.Error, $"Open Email Accounts file failed: {e.Message}");
				return null;
			}

			catch (Exception e)
			{
                _logHelper.Log(LogLevel.Error, $"Error opening file {file?.Path + commLogFileName}, {e}");
				return null;
			}
            commLog.CommLogEntryList = commLog.CommLogEntries?.ToList();
            return commLog;
        }

        private string CreateFixedLengthString(string text, int length)
        {
            string fieldText = text;
            if (text.Length == length)
            {
                return text;
            }
            else if (text.Length > length)
            {
                fieldText = fieldText.Substring(0, length - 1);
                fieldText += '~';
            }
            else if (text.Length < length)
            {
                while (fieldText.Length < length)
                {
                    fieldText += " ";
                }
            }
            return fieldText;
        }

        public async Task SaveAsync()
		{
            bool xmlFormat = false;
            bool txtFormat = false;
            bool csvFormat = false;

            ContentDialog309FileFormat selectFileFormat = new ContentDialog309FileFormat();
            ContentDialogResult result = await selectFileFormat.ShowAsync();
            if (result == ContentDialogResult.Primary)
            {
                xmlFormat = selectFileFormat.XmlFormat;
                txtFormat = selectFileFormat.TxtFormat;
                csvFormat = selectFileFormat.CsvFormat;
            }
            else
                return;

            StorageFolder localFolder = ApplicationData.Current.LocalFolder;
            string fileName = "";
            try
			{
                CommLogEntries = CommLogEntryList.ToArray();

                if (xmlFormat)
                {
                    fileName = $"{commLogFileName}_{OperationalPeriodFrom.ToString("MMddyyyy")}_{OperationalPeriodTo.ToString("MMddyyyy")}.xml";
                    StorageFile file = await localFolder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);
                    using (StreamWriter writer = new StreamWriter(new FileStream(file.Path, FileMode.OpenOrCreate)))
                    {
                        XmlSerializer serializer = new XmlSerializer(typeof(CommLog));
                        serializer.Serialize(writer, this);
                    }
                }
                if (txtFormat)
                {
                    StringBuilder sb = new StringBuilder("ICS 309 COMMUNICATIONS LOG\r");
                    sb.AppendLine();
                    sb.AppendLine($"Task #               {ActivationNumber}");
                    sb.AppendLine($"Prepared Date:       {DateTimePrepared}");
                    sb.AppendLine($"Operational Period:  {$"{DateTimeStrings.DateTimeString(OperationalPeriodFrom)} to {DateTimeStrings.DateTimeString(OperationalPeriodTo)}"}");
                    sb.AppendLine($"Task Name:           {IncidentName}");
                    sb.AppendLine($"Radio Operator Name: {IdentityViewModel.Instance.UserName}");
                    sb.AppendLine($"Station ID:          {IdentityViewModel.Instance.UserCallsign}");
                    sb.AppendLine();
                    sb.AppendLine("Date/Time      From        From Msg#  To          To Msg#    Subject");
                    sb.AppendLine("-------------- ----------- ---------- ----------- ---------- -------------------------------------");
                    foreach (CommLogEntry entry in CommLogEntryList)
                    {
                        string field1 = CreateFixedLengthString(DateTimeStrings.DateTimeStringShortYear(entry.Time), 14);
                        string field2 = CreateFixedLengthString(entry.FromCallsign, 11);
                        string field3 = CreateFixedLengthString(entry.FromMessageNumber, 10);
                        string field4 = CreateFixedLengthString(entry.ToCallsign, 11);
                        string field5 = CreateFixedLengthString(entry.ToMessageNumber, 10);
                        string field6 = CreateFixedLengthString(entry.Message, 37);

                        sb.AppendLine($"{field1} {field2} {field3} {field4} {field5} {field6}");
                    }
                    string ics309 = sb.ToString();

                    FileSavePicker savePicker = new FileSavePicker();
                    savePicker.SuggestedStartLocation = PickerLocationId.DocumentsLibrary;
                    // Dropdown of file types the user can save the file as
                    savePicker.FileTypeChoices.Add("Plain Text", new List<string>() { ".txt" });
                    // Default file name if the user does not type one in or select a file to replace
                    fileName = $"{commLogFileName}_{OperationalPeriodFrom.ToString("MMddyyyy")}_{OperationalPeriodTo.ToString("MMddyyyy")}.txt";
                    savePicker.SuggestedFileName = fileName;
                    StorageFile txtfile = await savePicker.PickSaveFileAsync();
                    if (txtfile != null)
                    {
                        // Prevent updates to the remote version of the file until we finish making changes and call CompleteUpdatesAsync.
                        CachedFileManager.DeferUpdates(txtfile);
                        // write to file
                        await FileIO.WriteTextAsync(txtfile, ics309);
                        // Let Windows know that we're finished changing the file so the other app can update the remote version of the file.
                        // Completing updates may require Windows to ask for user input.
                        FileUpdateStatus status = await CachedFileManager.CompleteUpdatesAsync(txtfile);
                        if (status == FileUpdateStatus.Complete)
                        {
                            _logHelper.Log(LogLevel.Info, $"File {txtfile.Name} was saved.");
                        }
                        else
                        {
                            _logHelper.Log(LogLevel.Error, $"File {txtfile.Name} couldn't be saved.");
                        }
                    }
                }
                if (csvFormat)
                {
                    StringBuilder sb = new StringBuilder("ICS 309 COMMUNICATIONS LOG");
                    sb.AppendLine();
                    sb.AppendLine($"Task #,{ActivationNumber}");
                    sb.AppendLine($"Prepared Date:,{DateTimePrepared}");
                    sb.AppendLine($"Operational Period:{$"{DateTimeStrings.DateTimeString(OperationalPeriodFrom)} to {DateTimeStrings.DateTimeString(OperationalPeriodTo)}"}");
                    sb.AppendLine($"Task Name:,{IncidentName}");
                    sb.AppendLine($"Radio Operator Name:,{IdentityViewModel.Instance.UserName}");
                    sb.AppendLine($"Station ID:,{IdentityViewModel.Instance.UserCallsign}");
                    sb.AppendLine();
                    sb.AppendLine("Date/Time,From,From Msg#,To,To Msg#,Subject");
                    foreach (CommLogEntry entry in CommLogEntryList)
                    {
                        sb.AppendLine($"{DateTimeStrings.DateTimeStringShortYear(entry.Time)},{entry.FromCallsign},{entry.FromMessageNumber},{entry.ToCallsign},{entry.ToMessageNumber},\"{entry.Message}\"");
                    }
                    string ics309 = sb.ToString();

                    FileSavePicker savePicker = new FileSavePicker();
                    savePicker.SuggestedStartLocation = PickerLocationId.DocumentsLibrary;
                    // Dropdown of file types the user can save the file as
                    savePicker.FileTypeChoices.Add("Comma delimited", new List<string>() { ".csv" });
                    // Default file name if the user does not type one in or select a file to replace
                    fileName = $"{commLogFileName}_{OperationalPeriodFrom.ToString("MMddyyyy")}_{OperationalPeriodTo.ToString("MMddyyyy")}.csv";
                    savePicker.SuggestedFileName = fileName;
                    StorageFile csvfile = await savePicker.PickSaveFileAsync();
                    if (csvfile != null)
                    {
                        // Prevent updates to the remote version of the file until we finish making changes and call CompleteUpdatesAsync.
                        CachedFileManager.DeferUpdates(csvfile);
                        // write to file
                        await FileIO.WriteTextAsync(csvfile, ics309);
                        // Let Windows know that we're finished changing the file so the other app can update the remote version of the file.
                        // Completing updates may require Windows to ask for user input.
                        FileUpdateStatus status = await CachedFileManager.CompleteUpdatesAsync(csvfile);
                        if (status == FileUpdateStatus.Complete)
                        {
                            _logHelper.Log(LogLevel.Info, $"File {csvfile.Name} was saved.");
                        }
                        else
                        {
                            _logHelper.Log(LogLevel.Error, $"File {csvfile.Name} couldn't be saved.");
                        }
                    }
                }
            }
			catch (Exception e)
			{
				log.Error($"Error saving {fileName}, {e}");
				return;
			}
		}

		public void AddCommLogEntry(PacketMessage packetMessage, DateTime startTime, DateTime endTime)
		{
            if (packetMessage is null)
                return;

			CommLogEntry commLogEntry = null;
            try
            {
                if (packetMessage.SentTime != null && (packetMessage.SentTime >= startTime && packetMessage.SentTime <= endTime))
                {
                    // This message was sent
                    string messageTo = packetMessage.MessageTo.Substring(0, (packetMessage.MessageTo.IndexOf('@') == -1 ? packetMessage.MessageTo.Length : packetMessage.MessageTo.IndexOf('@')));
                    commLogEntry = new CommLogEntry()
                    {
                        Time = (DateTime)packetMessage.SentTime,
                        FromCallsign = "",
                        FromMessageNumber = packetMessage.MessageNumber,
                        ToCallsign = packetMessage.MessageTo.Substring(0, (packetMessage.MessageTo.IndexOf('@') == -1 ? packetMessage.MessageTo.Length : packetMessage.MessageTo.IndexOf('@'))),
                        ToMessageNumber = packetMessage.ReceiverMessageNumber ?? "",
                        Message = packetMessage.Subject,
                    };
                }
                else if (packetMessage.ReceivedTime != null && (packetMessage.ReceivedTime >= startTime && packetMessage.ReceivedTime <= endTime))
                {
                    //string fromMessageNumber = packetMessage.Subject.Substring(0, (packetMessage.Subject.IndexOf('_') == -1 ? 0 : packetMessage.Subject.IndexOf('_')));
                    // This message was received
                    // Remove "DELIVERED:"
                    string subjectFiltered = packetMessage.Subject.Substring(packetMessage.Subject.IndexOf(':') == -1 || packetMessage.Subject.IndexOf(':') > 9  ? 0 : packetMessage.Subject.IndexOf(':') + 2);

                    commLogEntry = new CommLogEntry()
                    {
                        Time = (DateTime)packetMessage.ReceivedTime,
                        FromCallsign = packetMessage.MessageFrom.Substring(0, (packetMessage.MessageFrom.IndexOf('@') == -1 ? packetMessage.MessageFrom.Length : packetMessage.MessageFrom.IndexOf('@'))),
                        FromMessageNumber = subjectFiltered.Substring(0, (packetMessage.Subject.IndexOf('_') == -1 ? subjectFiltered.Length : subjectFiltered.IndexOf('_'))),
                        ToCallsign = "",
                        ToMessageNumber = packetMessage.MessageNumber,
                        Message = packetMessage.Subject,
                    };
                }
            }
            catch (Exception e)
            {
                _logHelper.Log(LogLevel.Error, $"Error adding CommLog entry {packetMessage.MessageNumber}, {e.Message}");
            }
            if (commLogEntry != null)
			{
				commLogEntryListField.Add(commLogEntry);				
			}
		}

	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.81.0")]
    //[System.SerializableAttribute()]
    //[System.Diagnostics.DebuggerStepThroughAttribute()]
    //[System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class CommLogEntry
	{
		private DateTime timeField;

		private string fromCallsignField;

		private string fromMessageNumberField;

		private string toCallsignField;

		private string toMessageNumberField = "";

		private string messageField;

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public DateTime Time
		{
			get
			{
				return this.timeField;
			}
			set
			{
				this.timeField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string FromCallsign
		{
			get
			{
				return this.fromCallsignField;
			}
			set
			{
				this.fromCallsignField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string FromMessageNumber
		{
			get
			{
				return this.fromMessageNumberField;
			}
			set
			{
				this.fromMessageNumberField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ToCallsign
		{
			get
			{
				return this.toCallsignField;
			}
			set
			{
				this.toCallsignField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string ToMessageNumber
		{
			get
			{
				return this.toMessageNumberField;
			}
			set
			{
				this.toMessageNumberField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}
	}
}
